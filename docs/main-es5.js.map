{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/common/interceptor/error.interceptor.ts","webpack:///src/app/common/interceptor/loading.interceptor.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","http","renderer","users$","get","setProperty","result","nativeElement","callAPI","callAPIWithError","clear","selector","templateUrl","styleUrls","AppModule","provide","useClass","multi","forRoot","declarations","imports","providers","bootstrap","ErrorInterceptor","toastr","request","next","handle","pipe","error","console","log","LoadingInterceptor","spinner","activated","show","hide","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, Renderer2, ViewChild, ElementRef } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.sass']\n})\nexport class AppComponent {\n    users$;\n\n    @ViewChild('result') result: ElementRef;\n\n    constructor(\n        private http: HttpClient,\n        private renderer: Renderer2\n    ) { }\n    callAPI() {\n        this.users$ = this.http.get('https://jsonplaceholder.typicode.com/users');\n    }\n\n    callAPIWithError() {\n        this.users$ = this.http.get('https://jsonplaceholder.typicode.com/usersgg');\n    }\n\n    clear() {\n        this.renderer.setProperty(this.result.nativeElement, 'innerHTML', '');\n    }\n}\n","<div>\n  <button (click)=\"callAPI()\">API 호출</button>\n  <button (click)=\"callAPIWithError()\">에러나는 API 호출</button>\n  <button (click)=\"clear()\">Clear</button>\n</div>\n\n<pre #result [innerHTML]=\"users$ | async | json\"></pre>\n\n<ngx-spinner\n  bdColor=\"rgba(255,255,255,0.8)\"\n  color=\"#f4696b\"\n  type=\"square-jelly-box\"\n></ngx-spinner>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { AppComponent } from './app.component';\nimport { LoadingInterceptor } from './common/interceptor/loading.interceptor';\nimport { ErrorInterceptor } from 'src/app/common/interceptor/error.interceptor';\nimport { NgxSpinnerModule } from 'ngx-spinner';\n\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ToastrModule } from 'ngx-toastr';\n\n@NgModule({\n    declarations: [\n        AppComponent\n    ],\n    imports: [\n        BrowserModule,\n        HttpClientModule,\n        NgxSpinnerModule,\n        BrowserAnimationsModule,\n        ToastrModule.forRoot()\n    ],\n    providers: [\n        // 요기 순서대로 인터셉터 실행됨\n        { provide: HTTP_INTERCEPTORS, useClass: LoadingInterceptor, multi: true },\n        { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport {\n    HttpRequest,\n    HttpHandler,\n    HttpEvent,\n    HttpInterceptor,\n    HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ToastrService } from 'ngx-toastr';\n\n/**\n * 에러 처리 인터셉터\n */\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n\n    constructor(\n        private toastr: ToastrService\n    ) { }\n\n    intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n        return next.handle(request).pipe(\n            catchError((error: HttpErrorResponse) => {\n                console.log(error);\n\n                this.toastr.error('에러 났어염', 'Error');\n                // this.toastr.error(error.message, 'Error');\n\n                return throwError(error);\n            })\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport {\n    HttpRequest,\n    HttpHandler,\n    HttpEvent,\n    HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { finalize, delay } from 'rxjs/operators';\nimport { NgxSpinnerService } from 'ngx-spinner';\n\n/**\n * API 호출할때 로딩 에니메이션 처리 인터셉터\n */\n@Injectable()\nexport class LoadingInterceptor implements HttpInterceptor {\n    activated = 0;\n\n    constructor(\n        private spinner: NgxSpinnerService\n    ) { }\n\n    intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n        if (this.activated === 0) {\n            console.log('로딩 똥그라미 출력');\n            this.spinner.show();\n        }\n\n        this.activated++;\n\n        return next.handle(request).pipe(\n            delay(4000),    // 테스트용 delay 5초\n            finalize(() => {\n                this.activated--;\n                if (this.activated === 0) {\n                    console.log('로딩 똥그라미 지우기');\n                    this.spinner.hide();\n                }\n            })\n        );\n    }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}