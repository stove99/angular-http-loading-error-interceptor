{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/common/interceptor/error.interceptor.ts","./src/app/common/interceptor/loading.interceptor.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, Renderer2, ViewChild, ElementRef } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.sass']\n})\nexport class AppComponent {\n    users$;\n\n    @ViewChild('result') result: ElementRef;\n\n    constructor(\n        private http: HttpClient,\n        private renderer: Renderer2\n    ) { }\n    callAPI() {\n        this.users$ = this.http.get('https://jsonplaceholder.typicode.com/users');\n    }\n\n    callAPIWithError() {\n        this.users$ = this.http.get('https://jsonplaceholder.typicode.com/usersgg');\n    }\n\n    clear() {\n        this.renderer.setProperty(this.result.nativeElement, 'innerHTML', '');\n    }\n}\n","<div>\n  <button (click)=\"callAPI()\">API 호출</button>\n  <button (click)=\"callAPIWithError()\">에러나는 API 호출</button>\n  <button (click)=\"clear()\">Clear</button>\n</div>\n\n<pre #result [innerHTML]=\"users$ | async | json\"></pre>\n\n<ngx-spinner\n  bdColor=\"rgba(255,255,255,0.8)\"\n  color=\"#f4696b\"\n  type=\"square-jelly-box\"\n></ngx-spinner>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { AppComponent } from './app.component';\nimport { LoadingInterceptor } from './common/interceptor/loading.interceptor';\nimport { ErrorInterceptor } from 'src/app/common/interceptor/error.interceptor';\nimport { NgxSpinnerModule } from 'ngx-spinner';\n\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ToastrModule } from 'ngx-toastr';\n\n@NgModule({\n    declarations: [\n        AppComponent\n    ],\n    imports: [\n        BrowserModule,\n        HttpClientModule,\n        NgxSpinnerModule,\n        BrowserAnimationsModule,\n        ToastrModule.forRoot()\n    ],\n    providers: [\n        // 요기 순서대로 인터셉터 실행됨\n        { provide: HTTP_INTERCEPTORS, useClass: LoadingInterceptor, multi: true },\n        { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport {\n    HttpRequest,\n    HttpHandler,\n    HttpEvent,\n    HttpInterceptor,\n    HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ToastrService } from 'ngx-toastr';\n\n/**\n * 에러 처리 인터셉터\n */\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n\n    constructor(\n        private toastr: ToastrService\n    ) { }\n\n    intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n        return next.handle(request).pipe(\n            catchError((error: HttpErrorResponse) => {\n                console.log(error);\n\n                this.toastr.error('에러 났어염', 'Error');\n                // this.toastr.error(error.message, 'Error');\n\n                return throwError(error);\n            })\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport {\n    HttpRequest,\n    HttpHandler,\n    HttpEvent,\n    HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { finalize, delay } from 'rxjs/operators';\nimport { NgxSpinnerService } from 'ngx-spinner';\n\n/**\n * API 호출할때 로딩 에니메이션 처리 인터셉터\n */\n@Injectable()\nexport class LoadingInterceptor implements HttpInterceptor {\n    activated = 0;\n\n    constructor(\n        private spinner: NgxSpinnerService\n    ) { }\n\n    intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n        if (this.activated === 0) {\n            console.log('로딩 똥그라미 출력');\n            this.spinner.show();\n        }\n\n        this.activated++;\n\n        return next.handle(request).pipe(\n            delay(4000),    // 테스트용 delay 5초\n            finalize(() => {\n                this.activated--;\n                if (this.activated === 0) {\n                    console.log('로딩 똥그라미 지우기');\n                    this.spinner.hide();\n                }\n            })\n        );\n    }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}